"""Tests for processing files with cog markers."""

import pytest

from andrewaylett_pre_commit_hooks.cog import main, run_cog_on_files

# Mark all tests in this module to change directory
pytestmark = pytest.mark.change_dir


@pytest.fixture
def cog_file(temp_dir, cog_content, create_file):
    """Create a test file with cog markers in the temporary directory."""
    return create_file(cog_content, temp_dir, "with_cog.py")


@pytest.fixture
def no_cog_file(temp_dir, no_cog_content, create_file):
    """Create a test file without cog markers in the temporary directory."""
    return create_file(no_cog_content, temp_dir, "without_cog.py")


def test_run_cog_on_files(cog_file):
    """Test that run_cog_on_files correctly processes files with cog markers."""
    # Run cog on the file
    success = run_cog_on_files({str(cog_file)})

    # Check that cog ran successfully
    assert success is True

    # Read the processed file
    with open(cog_file) as f:
        processed_content = f.read()

    # Check that the cog-generated content is present
    assert "print('This content was generated by cog!')" in processed_content


def test_main_with_cogfiles(temp_dir, cog_file, cogfiles_file):
    """Test the main function with .cogfiles."""
    # Run the main function
    main()

    # Read the processed file
    with open(cog_file) as f:
        processed_content = f.read()

    # Check that the cog-generated content is present
    assert "print('This content was generated by cog!')" in processed_content


def test_main_with_readme_md(temp_dir, readme_md_file):
    """Test the main function with README.md."""
    # Run the main function
    main()

    # Read the processed file
    with open(readme_md_file) as f:
        processed_content = f.read()

    # Check that the cog-generated content is present
    assert "print('This content was generated by cog!')" in processed_content


def test_main_with_readme(temp_dir, readme_file):
    """Test the main function with README."""
    # Run the main function
    main()

    # Read the processed file
    with open(readme_file) as f:
        processed_content = f.read()

    # Check that the cog-generated content is present
    assert "print('This content was generated by cog!')" in processed_content
