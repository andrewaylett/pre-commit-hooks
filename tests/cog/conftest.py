"""Fixtures for cog hook tests."""

from pathlib import Path

import pytest


@pytest.fixture
def cogfiles_content():
    """Return content for a .cogfiles file."""
    return """
with_cog.py
"""


@pytest.fixture
def cogfiles_file(temp_dir, cogfiles_content, create_file):
    """Create a .cogfiles file in the temporary directory."""
    return create_file(cogfiles_content, temp_dir, ".cogfiles")


@pytest.fixture
def readme_md_file(temp_dir, cog_content, create_file):
    """Create a README.md file in the temporary directory."""
    return create_file(cog_content, temp_dir, "README.md")


@pytest.fixture
def readme_file(temp_dir, cog_content, create_file):
    """Create a README file in the temporary directory."""
    return create_file(cog_content, temp_dir, "README")


@pytest.fixture
def cog_content():
    """Return content for a file with cog markers."""
    return '''"""Test file with cog markers."""

def example_function():
    """Example function with cog-generated content."""
    # [ [ [cog
    # import cog
    # cog.outl("    print('This content was generated by cog!')")
    # ]]]
    # Content will be generated here
    # [[[end]]]

    return "Hello, world!"
'''.replace("[ [ [", "[[[")


@pytest.fixture
def no_cog_content():
    """Return content for a file without cog markers."""
    return """
def example():
    print("No cog markers here")
    pass
"""


@pytest.fixture
def passing_cog_content():
    """Return content for a file with cog markers and correctly generated content."""
    return """
def example_passing():
    # [ [ [cog
    # import cog
    # cog.outl("    print('Generated Passing')")
    # ]]]
    print('Generated Passing')
    # [[[end]]]
    pass
""".replace("[ [ [", "[[[")


@pytest.fixture
def failing_cog_content():
    """Return content for a file with cog markers and incorrectly generated content."""
    return """
def example_failing():
    # [ [ [cog
    # import cog
    # cog.outl("    print('Generated Failing')")
    # ]]]
    print('Wrong content')
    # [[[end]]]
    pass
""".replace("[ [ [", "[[[")


@pytest.fixture
def create_file():
    """Create a test file in the given temporary directory.

    Returns:
        function: A function that creates a file with the given content.
    """

    def _create_file(content, temp_dir, filename):
        file_path = Path(temp_dir) / filename
        with open(file_path, "w") as f:
            f.write(content)
        return file_path

    return _create_file


@pytest.fixture
def cog_file(temp_dir, cog_content, create_file):
    """Create a test file with cog markers in the temporary directory."""
    return create_file(cog_content, temp_dir, "test_file.py")
