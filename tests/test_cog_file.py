"""Test file for testing the cog pre-commit hook using temporary files."""

import subprocess
import sys
import tempfile
from pathlib import Path


def create_test_file_with_cog(content, temp_dir):
    """Create a test file with cog markers in the given temporary directory."""
    file_path = Path(temp_dir) / "test_file.py"
    with open(file_path, "w") as f:
        f.write(content)
    return file_path


def test_cog_processing():
    """Test that cog correctly processes a file with cog markers."""
    # Create a temporary directory
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create a test file with cog markers
        content = '''"""Test file with cog markers."""

def example_function():
    """Example function with cog-generated content."""
    # [[[cog
    # import cog
    # cog.outl("    print('This content was generated by cog!')")
    # ]]]
    # Content will be generated here
    # [[[end]]]

    return "Hello, world!"
'''
        file_path = create_test_file_with_cog(content, temp_dir)

        # Run cog on the file
        cmd = [
            sys.executable,
            "-m",
            "cogapp",
            "-r",
            "-c",
            "-p",
            "import subprocess as sp, re, os, sys, pathlib as pl, cog",
            str(file_path),
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=False)

        # Check that cog ran successfully
        assert result.returncode == 0, f"Cog failed with error: {result.stderr}"

        # Read the processed file
        with open(file_path) as f:
            processed_content = f.read()

        # Check that the cog-generated content is present
        assert "print('This content was generated by cog!')" in processed_content

        # Check that the original content is preserved
        assert "def example_function():" in processed_content
        assert 'return "Hello, world!"' in processed_content
